<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!--Detect platform-->
    <PlatformEnv Condition="$([MSBuild]::IsOSPlatform('OSX'))">macos</PlatformEnv>
    <PlatformEnv Condition="$([MSBuild]::IsOSPlatform('Linux'))">linux</PlatformEnv>
    <PlatformEnv Condition="$([MSBuild]::IsOSPlatform('Windows'))">win</PlatformEnv>
    <!-- IsOsPlatform may not always be available on Windows -->
    <PlatformEnv Condition="'$(OS)' == 'Windows_NT'">win</PlatformEnv>
    <IsWindows Condition="'$(PlatformEnv)' == win">true</IsWindows>

    <!--Detect architecture -->
    <ArchEnv>$([System.Runtime.InteropServices.RuntimeInformation]::OSArchitecture.ToString().ToLower())</ArchEnv> 
  </PropertyGroup>

  <PropertyGroup>
    <OpenTapAutogeneratedMsBuildReferenceFile>$(MSBuildProjectDirectory)/obj/$(MSBuildProjectName).opentap.g.props</OpenTapAutogeneratedMsBuildReferenceFile>
    <OpenTapCommonDir>$(MSBuildThisFileDirectory)payload</OpenTapCommonDir>
    <OpenTapRuntimeDir>$(MSBuildThisFileDirectory)runtimes\$(PlatformEnv)-$(ArchEnv)</OpenTapRuntimeDir>
    </PropertyGroup>

  <ImportGroup Condition="'$(ExcludeRestorePackageImports)' != 'true'">
    <Import Project="$(OpenTapAutogeneratedMsBuildReferenceFile)" Condition="Exists('$(OpenTapAutogeneratedMsBuildReferenceFile)')"/>
  </ImportGroup>

  <Target Name="VerifyRuntime" BeforeTargets="Build">
    <Error Condition=" '$(OpenTapRuntimeDir)' == '' "
           Text="$(PlatformTarget) builds are not supported on $(OS)."/>
  </Target>

  <!-- Common payload files -->
  <ItemGroup>
    <PackagePayloadFiles Include="$(OpenTapCommonDir)\**\*"/>
  </ItemGroup>

  <!-- Payload for runtime -->
  <ItemGroup Condition=" '$(OpenTapRuntimeDir)' != '' ">
    <PackagePayloadFiles Include="$(OpenTapRuntimeDir)\**\*"/>
  </ItemGroup>

  <Target Name="CopyOpenTapPayloadFiles"
          Condition="'$(CopyOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          Inputs="@(PackagePayloadFiles)"
          Outputs="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"
          BeforeTargets="Build;PostBuildEvent">
    <Copy SourceFiles="@(PackagePayloadFiles)"
          DestinationFiles="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"/>
  </Target>

  <Target Name="CleanOpenTapPayloadFiles"
          Condition="'$(CleanOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          BeforeTargets="Clean">
    <ItemGroup>
      <PackagePayloadFilesToClean Include="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"/>
    </ItemGroup>
    <Delete Files="@(PackagePayloadFilesToClean);$(OutDir).InstallRan"/>
  </Target>

  <Target Name="CreateOpenTapPackage"
          Condition="'$(CreateOpenTapPackage)' != 'false' And
                     '$(OutDir)' != '' And
                     Exists('$(OutDir)') And
                     '$(OpenTapPackageDefinitionPath)' != '' And
                     Exists('$(OpenTapPackageDefinitionPath)')"
          AfterTargets="Build">
    <Exec Command=".\tap package create &quot;$(ProjectDir)\$(OpenTapPackageDefinitionPath)&quot;"
          Condition="'$(InstallCreatedOpenTapPackage)' != 'true'"
          WorkingDirectory="$(OutDir)" LogStandardErrorAsError="$(IsWindows)"/>
    <Exec Command=".\tap package create &quot;$(ProjectDir)\$(OpenTapPackageDefinitionPath)&quot; --install"
          Condition="'$(InstallCreatedOpenTapPackage)' == 'true'"
          WorkingDirectory="$(OutDir)" LogStandardErrorAsError="$(IsWindows)"/>
  </Target>

  <Target Name="ProcessOpenTapPackageList">
    <ItemGroup>
      <OpenTapPackagesToInstall Include="@(AdditionalOpenTapPackage)">
        <Version>%(AdditionalOpenTapPackage.Version)</Version>
        <Repository>%(AdditionalOpenTapPackage.Repository)</Repository>
        <UnpackOnly>%(AdditionalOpenTapPackage.UnpackOnly)</UnpackOnly>
        <Token>%(AdditionalOpenTapPackage.Token)</Token>
      </OpenTapPackagesToInstall>
      <OpenTapPackagesToInstall Include="@(OpenTapPackageReference)">
        <Version>%(OpenTapPackageReference.Version)</Version>
        <Repository>%(OpenTapPackageReference.Repository)</Repository>
        <UnpackOnly>%(OpenTapPackageReference.UnpackOnly)</UnpackOnly>
        <Token>%(OpenTapPackageReference.Token)</Token>
      </OpenTapPackagesToInstall>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.InstallOpenTapPackages" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="InstallOpenTapPackages"
          Inputs="@(OpenTapPackagesToInstall)"
          Outputs="$(OutDir).InstallRan"
          DependsOnTargets="CopyOpenTapPayloadFiles;ProcessOpenTapPackageList"
          BeforeTargets="Build">
    <InstallOpenTapPackages
      TapDir="$(OutDir)"
      PackagesToInstall="@(OpenTapPackagesToInstall)"
      Repositories="@(OpenTapPackageRepository)"
      SourceFile="$(MSBuildProjectFullPath)"
      PlatformTarget="$(PlatformTarget)"/>
    <Touch Files="$(OutDir).InstallRan" AlwaysCreate="true"/>
  </Target>

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.AddAssemblyReferencesFromPackage" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="GenerateOpenTapReferenceProps"
          Inputs="$(MSBuildProjectFullPath);@(PackageXmlFiles)"
          Outputs="$(OpenTapAutogeneratedMsBuildReferenceFile)"
          DependsOnTargets="InstallOpenTapPackages" BeforeTargets="ResolveReferences;CoreCompile;ResolveAssemblyReferences">
    <ItemGroup>
      <OpenTapPackagesToReference Include="@(AdditionalOpenTapPackage->WithMetadataValue('Reference', 'true'))"/>
      <OpenTapPackagesToReference Include="@(OpenTapPackageReference)" Exclude="@(OpenTapPackageReference->WithMetadataValue('Reference', 'false'))"/>
    </ItemGroup>
    <AddAssemblyReferencesFromPackage PackageInstallDir="$(OutDir)"
                                      SourceFile="$(MSBuildProjectFullPath)"
                                      OpenTapPackagesToReference="@(OpenTapPackagesToReference)"
                                      TargetMsBuildFile="$(OpenTapAutogeneratedMsBuildReferenceFile)">
      <Output TaskParameter="Assemblies" ItemName="_OpenTapPackagesReferences"/>
    </AddAssemblyReferencesFromPackage>
    <Touch Files="$(MSBuildThisFileFullPath)"/>
    <ItemGroup>
      <ReferencePathWithRefAssemblies Include="@(_OpenTapPackagesReferences-> '$(OutDir)%(Identity)')"/>
    </ItemGroup>
  </Target>

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.SetVersionPropertiesFromGit" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="GenerateGitVersionInfo"
    Condition="'$(UseGitVersionAssemblyInfo)' != 'false'"
    DependsOnTargets="InstallOpenTapPackages" BeforeTargets="ResolveReferences;CoreCompile;ResolveAssemblyReferences"
    >
    <SetVersionPropertiesFromGit TapDir="$(OutDir)" >
      <Output TaskParameter="Version" ItemName="_TaskVersion" />
      <Output TaskParameter="AssemblyVersion" ItemName="_TaskAssemblyVersion" />
      <Output TaskParameter="InformationalVersion" ItemName="_TaskInformationalVersion" />
      <Output TaskParameter="FileVersion" ItemName="_TaskFileVersion" />
    </SetVersionPropertiesFromGit>
    <PropertyGroup Condition="'@(_TaskVersion)' != ''">
      <GenerateAssemblyInfo>true</GenerateAssemblyInfo>
      <Version>@(_TaskVersion)</Version>
      <AssemblyVersion>@(_TaskAssemblyVersion)</AssemblyVersion>
      <InformationalVersion>@(_TaskInformationalVersion)</InformationalVersion>
      <FileVersion>@(_TaskFileVersion)</FileVersion> 
    </PropertyGroup>
  </Target>
</Project>
