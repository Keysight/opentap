<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <OpenTapAutogeneratedMsBuildReferenceFile>$(MSBuildProjectDirectory)/obj/$(MSBuildProjectName).opentap.g.props</OpenTapAutogeneratedMsBuildReferenceFile>
    <IsWindows Condition=" '$(OS)' == 'Unix' ">false</IsWindows>
    <IsWindows Condition=" '$(OS)' != 'Unix' ">true</IsWindows>
    <IsX86 Condition=" '$(PlatformTarget)' == 'x86' ">true</IsX86>
    <IsX86 Condition=" '$(PlatformTarget)' != 'x86' ">false</IsX86>
    <OpenTapCommonDir>$(MSBuildThisFileDirectory)payload</OpenTapCommonDir>
    <OpenTapRuntimeDir Condition="$(IsX86) And $(IsWindows) ">$(MSBuildThisFileDirectory)runtimes\win-x86</OpenTapRuntimeDir>
    <OpenTapRuntimeDir Condition=" '$(IsX86)' == 'false' And $(IsWindows) ">$(MSBuildThisFileDirectory)runtimes\win-x64</OpenTapRuntimeDir>
    <OpenTapRuntimeDir Condition=" '$(IsX86)' == 'false' And '$(IsWindows)' == 'false' ">$(MSBuildThisFileDirectory)runtimes\linux-x64</OpenTapRuntimeDir>
  </PropertyGroup>  

  <ImportGroup Condition="'$(ExcludeRestorePackageImports)' != 'true'">
    <Import Project="$(OpenTapAutogeneratedMsBuildReferenceFile)" Condition="Exists('$(OpenTapAutogeneratedMsBuildReferenceFile)')" />
  </ImportGroup>

  <Target Name="VerifyRuntime" BeforeTargets="Build">
    <Error Condition=" '$(OpenTapRuntimeDir)' == '' "
           Text="$(PlatformTarget) builds are not supported on $(OS)."/>
  </Target>

  <!-- Common payload files -->
  <ItemGroup>
    <PackagePayloadFiles Include="$(OpenTapCommonDir)\**\*"/>
  </ItemGroup>

  <!-- Payload for runtime --> 
  <ItemGroup Condition=" '$(OpenTapRuntimeDir)' != '' ">
    <PackagePayloadFiles Include="$(OpenTapRuntimeDir)\**\*" />
  </ItemGroup>
  
  <Target Name="CopyOpenTapPayloadFiles"
          Condition="'$(CopyOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          Inputs="@(PackagePayloadFiles)"
          Outputs="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"
          BeforeTargets="Build;PostBuildEvent">
    <Copy SourceFiles="@(PackagePayloadFiles)"
          DestinationFiles="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')" />
  </Target>

  <Target Name="CleanOpenTapPayloadFiles"
          Condition="'$(CleanOpenTapPayloadFiles)' != 'false' And
                     '$(OutDir)' != '' And
                     HasTrailingSlash('$(OutDir)') And
                     Exists('$(OutDir)')"
          BeforeTargets="Clean">
    <ItemGroup>
      <PackagePayloadFilesToClean Include="@(PackagePayloadFiles -> '$(OutDir)%(RecursiveDir)%(Filename)%(Extension)')"/>
    </ItemGroup>
    <Delete Files="@(PackagePayloadFilesToClean)" />
  </Target>

  <PropertyGroup>
    <PackageName>$(ProjectName).TapPackage</PackageName>
  </PropertyGroup>

  <ItemGroup Condition="'$(CreateOpenTapPackage)' != 'false' And
                        '$(OutDir)' != '' And Exists('$(OutDir)') And
                        '$(OpenTapPackageDefinitionPath)' != '' And
                        Exists('$(OpenTapPackageDefinitionPath)')">    
    <CreateCommands Include=".\tap package create &quot;$(ProjectDir)\$(OpenTapPackageDefinitionPath)&quot; -o $(PackageName)"/>
    <CreateCommands Include=".\tap package install $(PackageName)" Condition="'$(InstallCreatedOpenTapPackage)' == 'true'"/>
  </ItemGroup>

  <Target Name="CreateOpenTapPackage"
          Condition="'@(CreateCommands)' != ''"
          AfterTargets="Build">
    <Exec Command="%(CreateCommands.Identity)"
          WorkingDirectory="$(OutDir)" LogStandardErrorAsError="$(IsWindows)" />
  </Target>

  <Target Name="ProcessOpenTapPackageList">
    <ItemGroup>
      <OpenTapPackagesToInstall Include="@(AdditionalOpenTapPackage)">
        <Version>%(AdditionalOpenTapPackage.Version)</Version>
        <Repository>%(AdditionalOpenTapPackage.Repository)</Repository>        
        <UnpackOnly>%(AdditionalOpenTapPackage.UnpackOnly)</UnpackOnly>
      </OpenTapPackagesToInstall>
      <OpenTapPackagesToInstall Include="@(OpenTapPackageReference)">
        <Version>%(OpenTapPackageReference.Version)</Version>
        <Repository>%(OpenTapPackageReference.Repository)</Repository>        
        <UnpackOnly>%(OpenTapPackageReference.UnpackOnly)</UnpackOnly>
      </OpenTapPackagesToInstall>
    </ItemGroup>
  </Target> 

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.InstallOpenTapPackages" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="InstallOpenTapPackages"          
          Inputs="$(MSBuildProjectFullPath)"
          Outputs="@(OpenTapPackagesToInstall-> '$(OutDir)Packages/%(Identity)/package.xml')"
          DependsOnTargets="CopyOpenTapPayloadFiles;ProcessOpenTapPackageList"
          BeforeTargets="Build" AfterTargets="CopyOpenTapPayloadFiles">
    <InstallOpenTapPackages 
            TapDir="$(OutDir)" 
            PackagesToInstall="@(OpenTapPackagesToInstall)"
            SourceFile="$(MSBuildProjectFullPath)"
            PlatformTarget="$(PlatformTarget)"/>    
  </Target>

  <UsingTask TaskName="Keysight.OpenTap.Sdk.MSBuild.AddAssemblyReferencesFromPackage" AssemblyFile="$(MSBuildThisFileDirectory)\Keysight.OpenTap.Sdk.MSBuild.dll"/>
  <Target Name="GenerateOpenTapReferenceProps"
          Inputs="$(MSBuildProjectFullPath);@(OpenTapPackagesToInstall-> '$(OutDir)Packages/%(Identity)/package.xml')"
          Outputs="$(OpenTapAutogeneratedMsBuildReferenceFile)"
          DependsOnTargets="InstallOpenTapPackages" BeforeTargets="ResolveReferences;CoreCompile">
    <ItemGroup>
      <OpenTapPackagesToReference Include="@(AdditionalOpenTapPackage->WithMetadataValue('Reference', 'true'))"/>
      <OpenTapPackagesToReference Include="@(OpenTapPackageReference)" Exclude="@(OpenTapPackageReference->WithMetadataValue('Reference', 'false'))"/>
    </ItemGroup>
    <AddAssemblyReferencesFromPackage PackageInstallDir="$(OutDir)"
                                      SourceFile="$(MSBuildProjectFullPath)"
                                      OpenTapPackagesToReference="@(OpenTapPackagesToReference)"
                                      TargetMsBuildFile="$(OpenTapAutogeneratedMsBuildReferenceFile)">
      <Output TaskParameter="Assemblies" ItemName="_OpenTapPackagesReferences"/>
    </AddAssemblyReferencesFromPackage>
    <Touch Files="$(MSBuildThisFileFullPath)"/>
    <ItemGroup>
      <ReferencePathWithRefAssemblies Include="@(_OpenTapPackagesReferences-> '$(OutDir)%(Identity)')"/>
    </ItemGroup>
  </Target>
</Project>
